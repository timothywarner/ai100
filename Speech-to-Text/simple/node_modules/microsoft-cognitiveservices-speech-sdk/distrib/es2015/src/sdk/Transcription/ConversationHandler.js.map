{"version":3,"sources":["src/sdk/Transcription/ConversationHandler.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAClC,kDAAkD","file":"ConversationHandler.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { ConversationTranscriptionEventArgs, PropertyCollection, SessionEventArgs } from \"../Exports\";\r\nimport {\r\n  ConversationExpirationEventArgs,\r\n  ConversationParticipantsChangedEventArgs,\r\n  ConversationTranslationCanceledEventArgs,\r\n  ConversationTranslationEventArgs } from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport interface ConversationHandler {\r\n    /**\r\n     * Defines event handler for session started events.\r\n     */\r\n    sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     */\r\n    sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Event that signals an error with the conversation transcription, or the end of the audio stream has been reached.\r\n     */\r\n    canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Leave the current conversation. After this is called, you will no longer receive any events.\r\n     */\r\n    leaveConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Starts sending audio to the conversation service for speech recognition and translation. You\r\n     * should subscribe to the Transcribing, and Transcribed events to receive conversation\r\n     * translation results for yourself, and other participants in the conversation.\r\n     */\r\n    startTranscribingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Stops sending audio to the conversation service. You will still receive Transcribing, and\r\n     * and Transcribed events for other participants in the conversation.\r\n     */\r\n    stopTranscribingAsync(cb?: Callback, err?: Callback): void;\r\n}\r\n\r\n/**\r\n * A conversation translator that enables a connected experience where participants can use their\r\n * own devices to see everyone else's recognitions and IMs in their own languages. Participants\r\n * can also speak and send IMs to others.\r\n */\r\nexport interface IConversationTranslator extends ConversationHandler {\r\n\r\n    /** Gets the collection of properties and their values defined for this instance. */\r\n    readonly properties: PropertyCollection;\r\n\r\n    /** Gets the language name that is used for recognition. */\r\n    readonly speechRecognitionLanguage: string;\r\n\r\n    /**\r\n     * Event that signals how many more minutes are left before the conversation expires.\r\n     */\r\n    conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n\r\n    /**\r\n     * Event that signals participants in the conversation have changed (e.g. a new participant joined).\r\n     */\r\n    participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    /**\r\n     * Event that signals a translated text message from a conversation participant.\r\n     */\r\n    textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognized signals that a final  conversation translation result is received.\r\n      */\r\n    transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate conversation translation result is received.\r\n      */\r\n    transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    /**\r\n     * Joins an existing conversation. You should use this method if you have created a conversation using\r\n     * from an IConversation.\r\n     * @param conversation The conversation to join.\r\n     * @param nickname The display name to use for the current participant.\r\n     */\r\n    /** Start a conversation. */\r\n    joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Joins an existing conversation.\r\n     * @param conversationId The unique identifier for the conversation to join.\r\n     * @param nickname The display name to use for the current participant.\r\n     * @param lang The speech language to use for the current participant.\r\n     */\r\n    joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Sends an instant message to all participants in the conversation. This instant message\r\n     * will be translated into each participant's text language.\r\n     * @param message\r\n     */\r\n    sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\n/**\r\n * A conversation transcriber that enables a connected experience where conversations can\r\n * logged with each participant recognized.\r\n */\r\nexport interface ConversationTranscriptionHandler extends ConversationHandler {\r\n     /**\r\n      * The event recognized signals that a final conversation translation result is received.\r\n      */\r\n    transcribed: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate conversation translation result is received.\r\n      */\r\n    transcribing: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Joins an existing conversation.\r\n     * @param conversation The conversation to join.\r\n     */\r\n    joinConversationAsync(conversation: IConversation, cb?: Callback, err?: Callback): void;\r\n}\r\n"]}