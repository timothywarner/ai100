{"version":3,"sources":["src/sdk/Audio/AudioConfig.ts"],"names":[],"mappings":"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","file":"AudioConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    Deferred,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     *        Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     *        stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder();\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player as SpeakerAudioDestination);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     *        stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream as PushAudioOutputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then(() => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.blob\r\n     * @function\r\n     * @public\r\n     */\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.privSource.blob;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n"]}