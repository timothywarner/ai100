{"version":3,"sources":["src/sdk/Transcription/IConversation.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,kBAAkB,EAAE,uBAAuB,EAAE,MAAM,YAAY,CAAC;AACzE,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,wBAAwB,EAAE,MAAM,gBAAgB,CAAC;AAE/E,oBAAY,QAAQ,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,KAAK,IAAI,CAAC;AAE9C;;;GAGG;AACH,MAAM,WAAW,aAAa;IAE1B,MAAM,EAAE,uBAAuB,CAAC;IAEhC;;;;;OAKG;IACH,kBAAkB,EAAE,MAAM,CAAC;IAE3B,+DAA+D;IAC/D,QAAQ,CAAC,cAAc,EAAE,MAAM,CAAC;IAEhC,oFAAoF;IACpF,QAAQ,CAAC,UAAU,EAAE,kBAAkB,CAAC;IAExC,2DAA2D;IAC3D,QAAQ,CAAC,yBAAyB,EAAE,MAAM,CAAC;IAE3C;;OAEG;IACH,sBAAsB,CAAC,EAAE,CAAC,EAAE,MAAM,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI,CAAC;IAEzE,sFAAsF;IACtF,uBAAuB,CAAC,EAAE,CAAC,EAAE,MAAM,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI,CAAC;IAE1E,0BAA0B;IAC1B,oBAAoB,CAAC,EAAE,CAAC,EAAE,MAAM,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI,CAAC;IAEvE,4EAA4E;IAC5E,qBAAqB,CAAC,EAAE,CAAC,EAAE,MAAM,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI,CAAC;IAExE;;;OAGG;IACH,wBAAwB,CAAC,EAAE,CAAC,EAAE,MAAM,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI,CAAC;IAE3E;;;OAGG;IACH,oBAAoB,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,EAAE,MAAM,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI,CAAC;IAEvF;;;OAGG;IACH,sBAAsB,CAAC,MAAM,EAAE,MAAM,GAAG,YAAY,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE,MAAM,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI,CAAC;IAEhH,8BAA8B;IAC9B,uBAAuB,IAAI,IAAI,CAAC;IAEhC,yDAAyD;IACzD,0BAA0B,CAAC,EAAE,CAAC,EAAE,MAAM,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI,CAAC;IAE7E;;;OAGG;IACH,sBAAsB,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,EAAE,MAAM,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI,CAAC;CAE5F;AAED,MAAM,WAAW,gBAAgB;IAC7B,EAAE,EAAE,MAAM,CAAC;IACX,YAAY,EAAE,wBAAwB,EAAE,CAAC;IACzC,sBAAsB,EAAE,GAAG,CAAC;CAC/B","file":"IConversation.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection, SpeechTranslationConfig } from \"../Exports\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\r\n\r\nexport type Callback = (result?: any) => void;\r\n\r\n/**\r\n * Manages conversations.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IConversation {\r\n\r\n    config: SpeechTranslationConfig;\r\n\r\n    /**\r\n     * Gets/sets authorization token used to communicate with the service.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Otherwise, the recognizer will encounter errors during recognition.\r\n     */\r\n    authorizationToken: string;\r\n\r\n    /** Gets the unique identifier for the current conversation. */\r\n    readonly conversationId: string;\r\n\r\n    /** Gets the collection of properties and their values defined for this instance. */\r\n    readonly properties: PropertyCollection;\r\n\r\n    /** Gets the language name that is used for recognition. */\r\n    readonly speechRecognitionLanguage: string;\r\n\r\n    /** Start a conversation.\r\n     *  The host must connect to the websocket within a minute for the conversation to remain open.\r\n     */\r\n    startConversationAsync(cb?: () => void, err?: (e: string) => void): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    deleteConversationAsync(cb?: () => void, err?: (e: string) => void): void;\r\n\r\n    /** End a conversation. */\r\n    endConversationAsync(cb?: () => void, err?: (e: string) => void): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    lockConversationAsync(cb?: () => void, err?: (e: string) => void): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    muteAllParticipantsAsync(cb?: () => void, err?: (e: string) => void): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    muteParticipantAsync(userId: string, cb?: () => void, err?: (e: string) => void): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    removeParticipantAsync(userId: string | IParticipant | IUser, cb?: () => void, err?: (e: string) => void): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    unlockConversationAsync(): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    unmuteAllParticipantsAsync(cb?: () => void, err?: (e: string) => void): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    unmuteParticipantAsync(userId: string, cb?: () => void, err?: (e: string) => void): void;\r\n\r\n}\r\n\r\nexport interface ConversationInfo {\r\n    id: string;\r\n    participants: TranscriptionParticipant[];\r\n    conversationProperties: any;\r\n}\r\n"]}