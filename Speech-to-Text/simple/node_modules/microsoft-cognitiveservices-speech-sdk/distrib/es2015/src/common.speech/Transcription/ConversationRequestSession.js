// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { createNoDashGuid, Deferred, } from "../../common/Exports";
/**
 * Placeholder class for the Conversation Request Session. Based off RequestSession.
 * TODO: define what telemetry is required.
 */
export class ConversationRequestSession {
    constructor(sessionId) {
        this.privIsDisposed = false;
        this.privDetachables = new Array();
        this.onPreConnectionStart = (authFetchEventId, connectionId) => {
            this.privSessionId = connectionId;
        };
        this.onAuthCompleted = (isError, error) => {
            if (isError) {
                this.onComplete();
            }
        };
        this.onConnectionEstablishCompleted = (statusCode, reason) => {
            if (statusCode === 200) {
                return;
            }
            else if (statusCode === 403) {
                this.onComplete();
            }
        };
        this.onServiceTurnEndResponse = (continuousRecognition) => {
            if (!continuousRecognition) {
                this.onComplete();
            }
            else {
                this.privRequestId = createNoDashGuid();
            }
        };
        this.onComplete = () => {
            //
        };
        this.privSessionId = sessionId;
        this.privRequestId = createNoDashGuid();
        this.privRequestCompletionDeferral = new Deferred();
    }
    get sessionId() {
        return this.privSessionId;
    }
    get requestId() {
        return this.privRequestId;
    }
    get completionPromise() {
        return this.privRequestCompletionDeferral.promise;
    }
    dispose(error) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.privIsDisposed) {
                // we should have completed by now. If we did not its an unknown error.
                this.privIsDisposed = true;
                for (const detachable of this.privDetachables) {
                    yield detachable.detach();
                }
            }
        });
    }
}

//# sourceMappingURL=ConversationRequestSession.js.map
