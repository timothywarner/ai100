{"version":3,"sources":["src/common/List.ts"],"names":[],"mappings":"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","file":"List.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get = (itemIndex: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first = (): TItem => {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last = (): TItem => {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add = (item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt = (index: number, item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt = (index: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove = (index: number, count: number): TItem[] => {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear = (): void => {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length = (): number => {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded = (addedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved = (removedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed = (disposedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join = (seperator?: string): string => {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray = (): TItem[] => {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all = (callback: (item: TItem) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach = (callback: (item: TItem, index: number) => void): void => {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n    }\r\n\r\n    public clone = (): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat = (list: List<TItem>): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray = (array: TItem[]): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose = (reason?: string): void => {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed = (): void => {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}