{"version":3,"sources":["src/common.speech/ServiceTelemetryListener.Internal.ts"],"names":[],"mappings":"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","file":"ServiceTelemetryListener.Internal.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent = (e: PlatformEvent): void => {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n\r\n                this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry = (): string => {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError = (statusCode: number): string => {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n"]}