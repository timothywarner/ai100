{"version":3,"sources":["src/common/RiffPcmEncoder.ts"],"names":[],"mappings":"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","file":"RiffPcmEncoder.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode = (\r\n        actualAudioFrame: Float32Array): ArrayBuffer => {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame = (\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array => {\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n"]}