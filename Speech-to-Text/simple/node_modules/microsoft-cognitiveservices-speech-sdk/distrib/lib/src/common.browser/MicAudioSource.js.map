{"version":3,"sources":["src/common.browser/MicAudioSource.ts"],"names":[],"mappings":"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","file":"MicAudioSource.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public get blob(): Promise<Blob> {\r\n        return Promise.reject(\"Not implemented for Mic input\");\r\n    }\r\n\r\n    public turnOn = (): Promise<void> => {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error as Error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = () => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream) => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: MediaStreamError) => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any) => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async () => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: () => {\r\n                        return stream.read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string) => {\r\n            return {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            };\r\n        });\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, () => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private listen = async (audioNodeId: string): Promise<Stream<ArrayBuffer>> => {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext = (): void => {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            await this.privContext.close();\r\n            this.privContext = null;\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n"]}