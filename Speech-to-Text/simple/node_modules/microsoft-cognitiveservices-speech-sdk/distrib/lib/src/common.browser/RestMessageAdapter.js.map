{"version":3,"sources":["src/common.browser/RestMessageAdapter.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;;;;;;;;AAElC,6CAG2B;AAG3B,qDAAqD;AACrD,qDAAyC;AAEzC,IAAY,eAKX;AALD,WAAY,eAAe;IACvB,8BAAW,CAAA;IACX,gCAAa,CAAA;IACb,oCAAiB,CAAA;IACjB,gCAAa,CAAA;AACjB,CAAC,EALW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAK1B;AAWD,+FAA+F;AAC/F;IAMI,4BACI,YAA6B,EAC7B,YAAqB;QAGrB,IAAI,CAAC,YAAY,EAAE;YACf,MAAM,IAAI,2BAAiB,CAAC,cAAc,CAAC,CAAC;SAC/C;QAED,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,eAAe,GAAG,YAAY,CAAC,WAAW,CAAC;IACpD,CAAC;IAEM,uCAAU,GAAjB,UAAkB,GAAW,EAAE,KAAa;QACxC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IAClC,CAAC;IAEM,oCAAO,GAAd,UACI,MAAuB,EACvB,GAAW,EACX,WAAqB,EACrB,IAAgB,EAChB,UAAgC;QALpC,iBAoDC;QAjDG,4BAAA,EAAA,gBAAqB;QACrB,qBAAA,EAAA,WAAgB;QAChB,2BAAA,EAAA,iBAAgC;QAGhC,IAAM,wBAAwB,GAAG,IAAI,kBAAQ,EAAiB,CAAC;QAE/D,IAAI,GAAwC,CAAC;QAC7C,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,WAAW,EAAE;YACzC,GAAG,GAAG,IAAI,GAAG,CAAC,cAAc,EAAE,CAAC;SAClC;aAAM;YACH,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;SAC9B;QACD,IAAM,cAAc,GAAG,MAAM,KAAK,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;QACzE,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;QAEjE,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAC,GAAQ,IAAK,OAAA,GAAG,CAAC,gBAAgB,CAAC,GAAG,EAAE,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAhD,CAAgD,CAAC,CAAC;SACzG;QAED,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,GAAG,CAAC,gBAAgB,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;SACrD;QAED,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;QAE/B,GAAG,CAAC,MAAM,GAAG;YACT,wBAAwB,CAAC,OAAO,CAAC,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC;QAEF,GAAG,CAAC,OAAO,GAAG;YACV,wBAAwB,CAAC,OAAO,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,EAAE,yBAAyB,CAAC,CAAC,CAAC;QACzF,CAAC,CAAC;QAEF,GAAG,CAAC,SAAS,GAAG;YACZ,wBAAwB,CAAC,OAAO,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,EAAE,oCAAoC,CAAC,CAAC,CAAC;QACpG,CAAC,CAAC;QAEF,IAAI,MAAM,KAAK,eAAe,CAAC,IAAI,IAAI,UAAU,EAAE;YAC/C,GAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,qBAAqB,CAAC,CAAC;YAC5D,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACxB;aAAM,IAAI,MAAM,KAAK,eAAe,CAAC,IAAI,IAAI,IAAI,EAAE;YAChD,GAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACzD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;SAClC;aAAM;YACH,GAAG,CAAC,IAAI,EAAE,CAAC;SACd;QAED,OAAO,wBAAwB,CAAC,OAAO,CAAC;IAC5C,CAAC;IAEO,2CAAc,GAAtB,UAAuB,GAAwC;QAC3D,OAAO;YACH,IAAI,EAAE,GAAG,CAAC,YAAY;YACtB,OAAO,EAAE,GAAG,CAAC,qBAAqB,EAAE;YACpC,IAAI,EAAE,cAAS,OAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAM,EAAjC,CAAiC;YAChD,EAAE,EAAE,GAAG,CAAC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG;YACzC,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,UAAU,EAAE,GAAG,CAAC,UAAU;SAC7B,CAAC;IACN,CAAC;IAEO,0CAAa,GAArB,UAAsB,GAAwC,EAAE,OAA6B;QAA7B,wBAAA,EAAA,cAA6B;QACzF,OAAO;YACH,IAAI,EAAE,OAAO,IAAI,GAAG,CAAC,UAAU;YAC/B,OAAO,EAAE,GAAG,CAAC,qBAAqB,EAAE;YACpC,IAAI,EAAE,cAAS,OAAA,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,CAAM,EAA1D,CAA0D;YACzE,EAAE,EAAE,KAAK;YACT,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,UAAU,EAAE,GAAG,CAAC,UAAU;SAC7B,CAAC;IACN,CAAC;IAEO,sCAAS,GAAjB,UAAkB,GAAW,EAAE,MAAgB;QAAhB,uBAAA,EAAA,WAAgB;QAC3C,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC7C,OAAO,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC;IACzF,CAAC;IAEO,wCAAW,GAAnB,UAAoB,MAAgB;QAAhB,uBAAA,EAAA,WAAgB;QAChC,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;aACrB,GAAG,CAAC,UAAC,CAAM,IAAK,OAAA,kBAAkB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAA3D,CAA2D,CAAC;aAC5E,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC;IACL,yBAAC;AAAD,CA9GA,AA8GC,IAAA;AA9GY,gDAAkB","file":"RestMessageAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\n// Node.JS specific xmlhttprequest / browser support.\r\nimport * as XHR from \"xmlhttprequest-ts\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"get\",\r\n    Post = \"post\",\r\n    Delete = \"delete\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privTimeout: number;\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string; };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions,\r\n        connectionId?: string\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privTimeout = configParams.timeout;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string ): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: any = {},\r\n        body: any = null,\r\n        binaryBody: Blob | Buffer = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        let xhr: XMLHttpRequest | XHR.XMLHttpRequest;\r\n        if (typeof (XMLHttpRequest) === \"undefined\") {\r\n            xhr = new XHR.XMLHttpRequest();\r\n        } else {\r\n            xhr = new XMLHttpRequest();\r\n        }\r\n        const requestCommand = method === RestRequestType.File ? \"post\" : method;\r\n        xhr.open(requestCommand, this.withQuery(uri, queryParams), true);\r\n\r\n        if (this.privHeaders) {\r\n            Object.keys(this.privHeaders).forEach((key: any) => xhr.setRequestHeader(key, this.privHeaders[key]));\r\n        }\r\n\r\n        if (this.privIgnoreCache) {\r\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n        }\r\n\r\n        xhr.timeout = this.privTimeout;\r\n\r\n        xhr.onload = () => {\r\n            responseReceivedDeferral.resolve(this.parseXHRResult(xhr));\r\n        };\r\n\r\n        xhr.onerror = () => {\r\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Failed to make request.\"));\r\n        };\r\n\r\n        xhr.ontimeout = () => {\r\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Request took longer than expected.\"));\r\n        };\r\n\r\n        if (method === RestRequestType.File && binaryBody) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\r\n            xhr.send(binaryBody);\r\n        } else if (method === RestRequestType.Post && body) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhr.send(JSON.stringify(body));\r\n        } else {\r\n            xhr.send();\r\n        }\r\n\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private parseXHRResult(xhr: XMLHttpRequest | XHR.XMLHttpRequest): IRestResponse {\r\n        return {\r\n            data: xhr.responseText,\r\n            headers: xhr.getAllResponseHeaders(),\r\n            json: <T>() => JSON.parse(xhr.responseText) as T,\r\n            ok: xhr.status >= 200 && xhr.status < 300,\r\n            status: xhr.status,\r\n            statusText: xhr.statusText,\r\n        };\r\n    }\r\n\r\n    private errorResponse(xhr: XMLHttpRequest | XHR.XMLHttpRequest, message: string | null = null): IRestResponse {\r\n        return {\r\n            data: message || xhr.statusText,\r\n            headers: xhr.getAllResponseHeaders(),\r\n            json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\r\n            ok: false,\r\n            status: xhr.status,\r\n            statusText: xhr.statusText,\r\n        };\r\n    }\r\n\r\n    private withQuery(url: string, params: any = {}): any {\r\n        const queryString = this.queryParams(params);\r\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n    }\r\n\r\n    private queryParams(params: any = {}): any {\r\n        return Object.keys(params)\r\n            .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n"]}