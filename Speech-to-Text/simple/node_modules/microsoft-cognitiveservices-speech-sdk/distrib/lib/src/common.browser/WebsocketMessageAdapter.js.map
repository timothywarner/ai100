{"version":3,"sources":["src/common.browser/WebsocketMessageAdapter.ts"],"names":[],"mappings":"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","file":"WebsocketMessageAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\n// Node.JS specific web socket / browser support.\r\nimport ws from \"ws\";\r\nimport { CertCheckAgent } from \"./CertChecks\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string; };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string; },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n                const checkAgent: CertCheckAgent = new CertCheckAgent(this.proxyInfo);\r\n\r\n                options.agent = checkAgent.GetAgent();\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (e: { target: WebSocket | ws }) => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }) => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }) => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<void> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close = (reason?: string): Promise<void> => {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage = (sendItem: ISendItem): Promise<void> => {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent = (event: ConnectionEvent): void => {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n"]}